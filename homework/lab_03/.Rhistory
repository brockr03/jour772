knitr::opts_chunk$set(echo = TRUE)
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse
# Load janitor
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
# Load in the Maryland grants and loan data
# Turn off scientific notation
options(scipen=999)
# Load the tidyverse
library(tidyverse)
# Load janitor
library(janitor)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024_20250115.csv", guess_max=369008)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022_20250115.csv")
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024_20250115.csv", guess_max=369008)
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024_20250115.csv", guess_max=369008)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024_20250115.csv", guess_max=369008)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024_20250115.csv", guess_max=369008)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=369008)
# Load in the Maryland grants and loan data
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022_20250115.csv")
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=369008)
# Load in the Maryland grants and loan data
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
View(payments)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=369008) |>
clean_names()
# Load in the Maryland grants and loan data
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
payments |>
group_by(`Vendor Name`) |>
filter(str_detect(vendor_names,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")
payments |>
group_by(`vendor_names`) |>
filter(str_detect(vendor_names,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS"))
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"))|
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS")) |
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"))
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS")
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"))
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS")) |
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"))) |
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS")))
payments |>
filter(str_detect(vendor_name,"PRINCE GEORGES COUNTY PUBLIC SCHOOLS")) |
filter(str_detect(vendor_name,"PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS")))
payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS|PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"))
payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS|PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS"|"PG COUNTY PUBLIC SCHOOL"))
payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS|PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS|PG COUNTY PUBLIC SCHOOL"))
payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS|PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS|PG COUNTY PUBLIC SCHOOL|PRINCE GEORGES PUBLIC SCHOOLS"))
pg_schools <- payments |>
filter(str_detect(vendor_name, "PRINCE GEORGES COUNTY PUBLIC SCHOOLS|PRINCE GEORGE'S COUNTY PUBLIC SCHOOLS|PG COUNTY PUBLIC SCHOOL|PRINCE GEORGES PUBLIC SCHOOLS"))
View(pg_schools)
pg_schools |>
group_by(fiscal_year) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
View(pg_schools)
View(payments)
cap_projects_md <- payments |>
filter(str_detect(agency_name, "CAPITAL PROJECTS- UNIVERSITY OF MARYLAND"))
View(cap_projects_md)
cap_projects_md |>
group_by(vendor_name) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
cap_projects_md |>
group_by(vendor_name, vendor_zip) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
View(payments)
View(md_grants_loans)
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell|STEM CELL|stem cell"))
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell"))
stem_funding <- md_grants_loans |>
filter(str_detect(Description, "Stem Cell|STEM CELL|stem cell"))
View(stem_funding)
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=369008) |>
clean_names()
# Load in the Maryland grants and loan data
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv")
clean_names()
# Load in the Maryland state agency payments data, making sure that it correctly sets the datatypes using all of the rows
payments <- read_csv("data/State_of_Maryland_Payments_Data__FY2008_to_FY2024.csv", guess_max=369008) |>
clean_names()
# Load in the Maryland grants and loan data
md_grants_loans <- read_csv("data/State_of_Maryland_Grant_and_Loan_Data__FY2009_to_FY2022.csv") |>
clean_names()
stem_funding <- md_grants_loans |>
filter(str_detect(Description, "Stem Cell|STEM CELL|stem cell"))
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell|STEM CELL|stem cell"))
group_by(fiscal_year, amount) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
View(stem_funding)
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell|STEM CELL|stem cell"))
group_by(fiscal_year, amount) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell|STEM CELL|stem cell"))
group_by(fiscal_year) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
stem_funding <- md_grants_loans |>
filter(str_detect(description, "Stem Cell|STEM CELL|stem cell")) |>
group_by(fiscal_year) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
View(stem_funding)
View(md_grants_loans)
md_grants_loans |>
filter(str_detect(zip_code, "21201"))
md_grants_loans |>
filter(str_detect(zip_code, "20740"))
md_grants_loans |>
filter(str_detect(zip_code, "20740"))
group_by(grantee) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
md_grants_loans |>
filter(str_detect(zip_code, "20740"))
md_grants_loans |>
filter(str_detect(zip_code, "20740"))
group_by(grantee) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
md_grants_loans |>
filter(str_detect(zip_code, "20740")) |>
group_by(grantee) |>
summarise(total_amt=sum(amount, nam.rm=TRUE)) |>
arrange(desc(total_amt))
